# 도미와 빙어의 길이 및 무게 데이터를 2차원 리스트로 생성
fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

fish_data = [[l, w] for l, w in zip(fish_length, fish_weight)] 
fish_target = [1]*35 + [0]*14

print(fish_data)

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()

print(fish_data[4]) # 5번째 인덱스 데이터를 출력
print(fish_data[0:5]) # 슬라이싱 : 첫번째부터 5개의 샘플 데이터를 출력
print(fish_data[:5])
print(fish_data[44:])


train_input = fish_data[:35] # 훈련 세트로 입력 값 중 0부터 34번째 인덱스까지 사용
train_target = fish_target[:35] # 훈련 세트로 타깃값 중 0부터 34번째 인덱스까지 사용
test_input = fish_data[35:] # 테스트 세트로 입력한 값 중 35번째부터 마지막까지
test_target = fish_target[35:] #테스트 세트 타깃 35번째부터 마지막까지

kn = kn.fit(train_input, train_target) # 훈련 데이터로 훈련
kn.score(test_input, test_target) # 테스트 데이터로 성능 평가

# 테스트 결과 0, 테스트 세트를 섞지 않았음

import numpy as np

input_arr = np.array(fish_data)
target_arr = np.array(fish_target)

print(input_arr) # 배열의 차원을 구분하기 쉽도록 행과 가지런히 출력

print(input_arr.shape) # (샘플 수, 특성 수)를 출력

np.random.seed() # 테스트에서 동일한 결과를 얻어서 확인하기 위해 임의로 42를 지정
index = np.arange(49)
np.random.shuffle(index)

print(index) # 0부터 48까지 잘 섞인것을 확인

print(input_arr[[1, 3]]) # 두번째와 네번째 샘플을 출력

train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]
# 앞에서부터 35개의 샘플을 랜덤하게 지정하여 훈련 세트로 만듦

test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]
# 나머지 14개를 테스트 데이터로

import matplotlib.pyplot as plt
plt.scatter(train_input[:, 0], train_input[:,1])
plt.scatter(test_input[:, 0], test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier() # 훈련시킬 모델 생성
kn.fit(train_input, train_target) # 훈련
kn.score(test_input, test_target) # 평가
# 정확도 100
